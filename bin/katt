#!/usr/bin/env escript

main([]) ->
    main(["--help"]);
main(["-h"]) ->
    main(["--help"]);
main(["--help"]) ->
    io:fwrite("Usage: ~s [--json] file.katt param=string param:=non_string ~n", [escript:script_name()]);
main(["--json", ScenarioFilename|Params]) ->
    KattResult = katt_run(ScenarioFilename, Params),
    JsonResult = katt_util:run_result_to_mochijson3(KattResult),
    Result = iolist_to_binary(mochijson3:encode(JsonResult)),
    io:fwrite("~s\n\n", [Result]),
    case KattResult of
        {pass, _, _, _ , _} ->
            ok;
        _ ->
            halt(1)
    end;
main([ScenarioFilename|Params]) ->
    KattResult = katt_run(ScenarioFilename, Params),
    io:fwrite("~p\n\n", [KattResult]),
    case KattResult of
        {pass, _, _, _ , _} ->
            ok;
        _ ->
            halt(1)
    end.

%%%
%%% HELPERS
%%%

katt_run(ScenarioFilename, Params0) ->
    Params = parse_params(Params0),
    Dir = filename:dirname(escript:script_name()),
    true = code:add_pathz(Dir ++ "/ebin"),
    true = code:add_pathz(Dir ++ "/deps/lhttpc/ebin"),
    true = code:add_pathz(Dir ++ "/deps/mochijson3/ebin"),
    ok = ssl:start(),
    ok = lhttpc:start(),
    katt:run( ScenarioFilename
            , Params
            , [{ progress
               , fun(Step, Detail) ->
                         io:fwrite( standard_error
                                  , "\n== PROGRESS REPORT ~p ==\n~p\n\n~p\n\n"
                                  , [Step, erlang:localtime(), Detail])
                 end
               }]).

parse_params(Params) ->
    parse_params(Params, []).

parse_params([], Acc) ->
    lists:reverse(Acc);
parse_params([Param|Params], Acc) ->
    {Key, Value} = parse_param(Param),
    parse_params(Params, [{Key, Value}|Acc]).

parse_param(Param) ->
    parse_param(Param, []).

parse_param(":=" ++ _Value, []) ->
    throw({error, invalid_key});
parse_param("=" ++ _Value, []) ->
    throw({error, invalid_key});
parse_param(":=" ++ Value, Key) ->
    {list_to_atom(lists:reverse(Key)), convert(Value)};
parse_param("=" ++ Value, Key) ->
    {list_to_atom(lists:reverse(Key)), Value};
parse_param([Char|Rest], Key) ->
    parse_param(Rest, [Char|Key]).

convert(Value) ->
    try_to_convert_to([null, integer, float, boolean], Value).

try_to_convert_to([], _Value) ->
    throw({error, unknown_param_type});
try_to_convert_to([null|Rest], Value0) ->
    Value = string:to_lower(Value0),
    case Value of
        "null" ->
            null;
        _ ->
            try_to_convert_to(Rest, Value)
    end;
try_to_convert_to([integer|Rest], Value) ->
    case string:to_integer(Value) of
        {error, _} ->
            try_to_convert_to(Rest, Value);
        {IntValue, []} ->
            IntValue;
        _ ->
            try_to_convert_to(Rest, Value)
    end;
try_to_convert_to([float|Rest], Value) ->
    case string:to_float(Value) of
        {error, _} ->
            try_to_convert_to(Rest, Value);
        {FloatValue, []} ->
            FloatValue;
        _ ->
            try_to_convert_to(Rest, Value)
    end;
try_to_convert_to([boolean|Rest], Value0) ->
    Value = string:to_lower(Value0),
    case Value of
        "true" ->
            true;
        "false" ->
            false;
        _ ->
            try_to_convert_to(Rest, Value0)
    end.
